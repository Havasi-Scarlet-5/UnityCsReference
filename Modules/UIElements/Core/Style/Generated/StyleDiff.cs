// Unity C# reference source
// Copyright (c) Unity Technologies. For terms of use, see
// https://unity3d.com/legal/licenses/Unity_Reference_Only_License

/******************************************************************************/
//
//                             DO NOT MODIFY
//          This file has been generated by the UIElementsGenerator tool
//              See StylePropertyDataGenerator class for details
//
/******************************************************************************/
using System;
using System.Collections.Generic;
using Unity.Properties;

namespace UnityEngine.UIElements
{
    internal partial class StyleDiff
    {
        private StylePropertyData<StyleEnum<Align>, Align> m_AlignContent;
        private StylePropertyData<StyleEnum<Align>, Align> m_AlignItems;
        private StylePropertyData<StyleEnum<Align>, Align> m_AlignSelf;
        private StylePropertyData<StyleColor, Color> m_BackgroundColor;
        private StylePropertyData<StyleBackground, Background> m_BackgroundImage;
        private StylePropertyData<StyleBackgroundPosition, BackgroundPosition> m_BackgroundPositionX;
        private StylePropertyData<StyleBackgroundPosition, BackgroundPosition> m_BackgroundPositionY;
        private StylePropertyData<StyleBackgroundRepeat, BackgroundRepeat> m_BackgroundRepeat;
        private StylePropertyData<StyleBackgroundSize, BackgroundSize> m_BackgroundSize;
        private StylePropertyData<StyleColor, Color> m_BorderBottomColor;
        private StylePropertyData<StyleLength, Length> m_BorderBottomLeftRadius;
        private StylePropertyData<StyleLength, Length> m_BorderBottomRightRadius;
        private StylePropertyData<StyleFloat, float> m_BorderBottomWidth;
        private StylePropertyData<StyleColor, Color> m_BorderLeftColor;
        private StylePropertyData<StyleFloat, float> m_BorderLeftWidth;
        private StylePropertyData<StyleColor, Color> m_BorderRightColor;
        private StylePropertyData<StyleFloat, float> m_BorderRightWidth;
        private StylePropertyData<StyleColor, Color> m_BorderTopColor;
        private StylePropertyData<StyleLength, Length> m_BorderTopLeftRadius;
        private StylePropertyData<StyleLength, Length> m_BorderTopRightRadius;
        private StylePropertyData<StyleFloat, float> m_BorderTopWidth;
        private StylePropertyData<StyleLength, Length> m_Bottom;
        private StylePropertyData<StyleColor, Color> m_Color;
        private StylePropertyData<StyleCursor, Cursor> m_Cursor;
        private StylePropertyData<StyleEnum<DisplayStyle>, DisplayStyle> m_Display;
        private StylePropertyData<StyleLength, Length> m_FlexBasis;
        private StylePropertyData<StyleEnum<FlexDirection>, FlexDirection> m_FlexDirection;
        private StylePropertyData<StyleFloat, float> m_FlexGrow;
        private StylePropertyData<StyleFloat, float> m_FlexShrink;
        private StylePropertyData<StyleEnum<Wrap>, Wrap> m_FlexWrap;
        private StylePropertyData<StyleLength, Length> m_FontSize;
        private StylePropertyData<StyleLength, Length> m_Height;
        private StylePropertyData<StyleEnum<Justify>, Justify> m_JustifyContent;
        private StylePropertyData<StyleLength, Length> m_Left;
        private StylePropertyData<StyleLength, Length> m_LetterSpacing;
        private StylePropertyData<StyleLength, Length> m_MarginBottom;
        private StylePropertyData<StyleLength, Length> m_MarginLeft;
        private StylePropertyData<StyleLength, Length> m_MarginRight;
        private StylePropertyData<StyleLength, Length> m_MarginTop;
        private StylePropertyData<StyleLength, Length> m_MaxHeight;
        private StylePropertyData<StyleLength, Length> m_MaxWidth;
        private StylePropertyData<StyleLength, Length> m_MinHeight;
        private StylePropertyData<StyleLength, Length> m_MinWidth;
        private StylePropertyData<StyleFloat, float> m_Opacity;
        private StylePropertyData<StyleEnum<Overflow>, OverflowInternal> m_Overflow;
        private StylePropertyData<StyleLength, Length> m_PaddingBottom;
        private StylePropertyData<StyleLength, Length> m_PaddingLeft;
        private StylePropertyData<StyleLength, Length> m_PaddingRight;
        private StylePropertyData<StyleLength, Length> m_PaddingTop;
        private StylePropertyData<StyleEnum<Position>, Position> m_Position;
        private StylePropertyData<StyleLength, Length> m_Right;
        private StylePropertyData<StyleRotate, Rotate> m_Rotate;
        private StylePropertyData<StyleScale, Scale> m_Scale;
        private StylePropertyData<StyleEnum<TextOverflow>, TextOverflow> m_TextOverflow;
        private StylePropertyData<StyleTextShadow, TextShadow> m_TextShadow;
        private StylePropertyData<StyleLength, Length> m_Top;
        private StylePropertyData<StyleTransformOrigin, TransformOrigin> m_TransformOrigin;
        private StylePropertyData<StyleList<TimeValue>, List<TimeValue>> m_TransitionDelay;
        private StylePropertyData<StyleList<TimeValue>, List<TimeValue>> m_TransitionDuration;
        private StylePropertyData<StyleList<StylePropertyName>, List<StylePropertyName>> m_TransitionProperty;
        private StylePropertyData<StyleList<EasingFunction>, List<EasingFunction>> m_TransitionTimingFunction;
        private StylePropertyData<StyleTranslate, Translate> m_Translate;
        private StylePropertyData<StyleColor, Color> m_UnityBackgroundImageTintColor;
        private StylePropertyData<StyleEnum<EditorTextRenderingMode>, EditorTextRenderingMode> m_UnityEditorTextRenderingMode;
        private StylePropertyData<StyleFont, Font> m_UnityFont;
        private StylePropertyData<StyleFontDefinition, FontDefinition> m_UnityFontDefinition;
        private StylePropertyData<StyleEnum<FontStyle>, FontStyle> m_UnityFontStyleAndWeight;
        private StylePropertyData<StyleEnum<OverflowClipBox>, OverflowClipBox> m_UnityOverflowClipBox;
        private StylePropertyData<StyleLength, Length> m_UnityParagraphSpacing;
        private StylePropertyData<StyleInt, int> m_UnitySliceBottom;
        private StylePropertyData<StyleInt, int> m_UnitySliceLeft;
        private StylePropertyData<StyleInt, int> m_UnitySliceRight;
        private StylePropertyData<StyleFloat, float> m_UnitySliceScale;
        private StylePropertyData<StyleInt, int> m_UnitySliceTop;
        private StylePropertyData<StyleEnum<SliceType>, SliceType> m_UnitySliceType;
        private StylePropertyData<StyleEnum<TextAnchor>, TextAnchor> m_UnityTextAlign;
        private StylePropertyData<StyleTextAutoSize, TextAutoSize> m_UnityTextAutoSize;
        private StylePropertyData<StyleEnum<TextGeneratorType>, TextGeneratorType> m_UnityTextGenerator;
        private StylePropertyData<StyleColor, Color> m_UnityTextOutlineColor;
        private StylePropertyData<StyleFloat, float> m_UnityTextOutlineWidth;
        private StylePropertyData<StyleEnum<TextOverflowPosition>, TextOverflowPosition> m_UnityTextOverflowPosition;
        private StylePropertyData<StyleEnum<Visibility>, Visibility> m_Visibility;
        private StylePropertyData<StyleEnum<WhiteSpace>, WhiteSpace> m_WhiteSpace;
        private StylePropertyData<StyleLength, Length> m_Width;
        private StylePropertyData<StyleLength, Length> m_WordSpacing;
        [CreateProperty]
        public StylePropertyData<StyleEnum<Align>, Align> alignContent
        {
            get => m_AlignContent;
            private set
            {
                m_AlignContent.target = value.target;
                if (m_AlignContent == value)
                {
                    value.Dispose();
                    return;
                }

                m_AlignContent.Dispose();
                m_AlignContent = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Align>, Align> alignItems
        {
            get => m_AlignItems;
            private set
            {
                m_AlignItems.target = value.target;
                if (m_AlignItems == value)
                {
                    value.Dispose();
                    return;
                }

                m_AlignItems.Dispose();
                m_AlignItems = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Align>, Align> alignSelf
        {
            get => m_AlignSelf;
            private set
            {
                m_AlignSelf.target = value.target;
                if (m_AlignSelf == value)
                {
                    value.Dispose();
                    return;
                }

                m_AlignSelf.Dispose();
                m_AlignSelf = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> backgroundColor
        {
            get => m_BackgroundColor;
            private set
            {
                m_BackgroundColor.target = value.target;
                if (m_BackgroundColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_BackgroundColor.Dispose();
                m_BackgroundColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleBackground, Background> backgroundImage
        {
            get => m_BackgroundImage;
            private set
            {
                m_BackgroundImage.target = value.target;
                if (m_BackgroundImage == value)
                {
                    value.Dispose();
                    return;
                }

                m_BackgroundImage.Dispose();
                m_BackgroundImage = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleBackgroundPosition, BackgroundPosition> backgroundPositionX
        {
            get => m_BackgroundPositionX;
            private set
            {
                m_BackgroundPositionX.target = value.target;
                if (m_BackgroundPositionX == value)
                {
                    value.Dispose();
                    return;
                }

                m_BackgroundPositionX.Dispose();
                m_BackgroundPositionX = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleBackgroundPosition, BackgroundPosition> backgroundPositionY
        {
            get => m_BackgroundPositionY;
            private set
            {
                m_BackgroundPositionY.target = value.target;
                if (m_BackgroundPositionY == value)
                {
                    value.Dispose();
                    return;
                }

                m_BackgroundPositionY.Dispose();
                m_BackgroundPositionY = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleBackgroundRepeat, BackgroundRepeat> backgroundRepeat
        {
            get => m_BackgroundRepeat;
            private set
            {
                m_BackgroundRepeat.target = value.target;
                if (m_BackgroundRepeat == value)
                {
                    value.Dispose();
                    return;
                }

                m_BackgroundRepeat.Dispose();
                m_BackgroundRepeat = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleBackgroundSize, BackgroundSize> backgroundSize
        {
            get => m_BackgroundSize;
            private set
            {
                m_BackgroundSize.target = value.target;
                if (m_BackgroundSize == value)
                {
                    value.Dispose();
                    return;
                }

                m_BackgroundSize.Dispose();
                m_BackgroundSize = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> borderBottomColor
        {
            get => m_BorderBottomColor;
            private set
            {
                m_BorderBottomColor.target = value.target;
                if (m_BorderBottomColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderBottomColor.Dispose();
                m_BorderBottomColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> borderBottomLeftRadius
        {
            get => m_BorderBottomLeftRadius;
            private set
            {
                m_BorderBottomLeftRadius.target = value.target;
                if (m_BorderBottomLeftRadius == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderBottomLeftRadius.Dispose();
                m_BorderBottomLeftRadius = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> borderBottomRightRadius
        {
            get => m_BorderBottomRightRadius;
            private set
            {
                m_BorderBottomRightRadius.target = value.target;
                if (m_BorderBottomRightRadius == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderBottomRightRadius.Dispose();
                m_BorderBottomRightRadius = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> borderBottomWidth
        {
            get => m_BorderBottomWidth;
            private set
            {
                m_BorderBottomWidth.target = value.target;
                if (m_BorderBottomWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderBottomWidth.Dispose();
                m_BorderBottomWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> borderLeftColor
        {
            get => m_BorderLeftColor;
            private set
            {
                m_BorderLeftColor.target = value.target;
                if (m_BorderLeftColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderLeftColor.Dispose();
                m_BorderLeftColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> borderLeftWidth
        {
            get => m_BorderLeftWidth;
            private set
            {
                m_BorderLeftWidth.target = value.target;
                if (m_BorderLeftWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderLeftWidth.Dispose();
                m_BorderLeftWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> borderRightColor
        {
            get => m_BorderRightColor;
            private set
            {
                m_BorderRightColor.target = value.target;
                if (m_BorderRightColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderRightColor.Dispose();
                m_BorderRightColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> borderRightWidth
        {
            get => m_BorderRightWidth;
            private set
            {
                m_BorderRightWidth.target = value.target;
                if (m_BorderRightWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderRightWidth.Dispose();
                m_BorderRightWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> borderTopColor
        {
            get => m_BorderTopColor;
            private set
            {
                m_BorderTopColor.target = value.target;
                if (m_BorderTopColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderTopColor.Dispose();
                m_BorderTopColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> borderTopLeftRadius
        {
            get => m_BorderTopLeftRadius;
            private set
            {
                m_BorderTopLeftRadius.target = value.target;
                if (m_BorderTopLeftRadius == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderTopLeftRadius.Dispose();
                m_BorderTopLeftRadius = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> borderTopRightRadius
        {
            get => m_BorderTopRightRadius;
            private set
            {
                m_BorderTopRightRadius.target = value.target;
                if (m_BorderTopRightRadius == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderTopRightRadius.Dispose();
                m_BorderTopRightRadius = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> borderTopWidth
        {
            get => m_BorderTopWidth;
            private set
            {
                m_BorderTopWidth.target = value.target;
                if (m_BorderTopWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_BorderTopWidth.Dispose();
                m_BorderTopWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> bottom
        {
            get => m_Bottom;
            private set
            {
                m_Bottom.target = value.target;
                if (m_Bottom == value)
                {
                    value.Dispose();
                    return;
                }

                m_Bottom.Dispose();
                m_Bottom = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> color
        {
            get => m_Color;
            private set
            {
                m_Color.target = value.target;
                if (m_Color == value)
                {
                    value.Dispose();
                    return;
                }

                m_Color.Dispose();
                m_Color = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleCursor, Cursor> cursor
        {
            get => m_Cursor;
            private set
            {
                m_Cursor.target = value.target;
                if (m_Cursor == value)
                {
                    value.Dispose();
                    return;
                }

                m_Cursor.Dispose();
                m_Cursor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<DisplayStyle>, DisplayStyle> display
        {
            get => m_Display;
            private set
            {
                m_Display.target = value.target;
                if (m_Display == value)
                {
                    value.Dispose();
                    return;
                }

                m_Display.Dispose();
                m_Display = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> flexBasis
        {
            get => m_FlexBasis;
            private set
            {
                m_FlexBasis.target = value.target;
                if (m_FlexBasis == value)
                {
                    value.Dispose();
                    return;
                }

                m_FlexBasis.Dispose();
                m_FlexBasis = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<FlexDirection>, FlexDirection> flexDirection
        {
            get => m_FlexDirection;
            private set
            {
                m_FlexDirection.target = value.target;
                if (m_FlexDirection == value)
                {
                    value.Dispose();
                    return;
                }

                m_FlexDirection.Dispose();
                m_FlexDirection = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> flexGrow
        {
            get => m_FlexGrow;
            private set
            {
                m_FlexGrow.target = value.target;
                if (m_FlexGrow == value)
                {
                    value.Dispose();
                    return;
                }

                m_FlexGrow.Dispose();
                m_FlexGrow = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> flexShrink
        {
            get => m_FlexShrink;
            private set
            {
                m_FlexShrink.target = value.target;
                if (m_FlexShrink == value)
                {
                    value.Dispose();
                    return;
                }

                m_FlexShrink.Dispose();
                m_FlexShrink = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Wrap>, Wrap> flexWrap
        {
            get => m_FlexWrap;
            private set
            {
                m_FlexWrap.target = value.target;
                if (m_FlexWrap == value)
                {
                    value.Dispose();
                    return;
                }

                m_FlexWrap.Dispose();
                m_FlexWrap = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> fontSize
        {
            get => m_FontSize;
            private set
            {
                m_FontSize.target = value.target;
                if (m_FontSize == value)
                {
                    value.Dispose();
                    return;
                }

                m_FontSize.Dispose();
                m_FontSize = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> height
        {
            get => m_Height;
            private set
            {
                m_Height.target = value.target;
                if (m_Height == value)
                {
                    value.Dispose();
                    return;
                }

                m_Height.Dispose();
                m_Height = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Justify>, Justify> justifyContent
        {
            get => m_JustifyContent;
            private set
            {
                m_JustifyContent.target = value.target;
                if (m_JustifyContent == value)
                {
                    value.Dispose();
                    return;
                }

                m_JustifyContent.Dispose();
                m_JustifyContent = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> left
        {
            get => m_Left;
            private set
            {
                m_Left.target = value.target;
                if (m_Left == value)
                {
                    value.Dispose();
                    return;
                }

                m_Left.Dispose();
                m_Left = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> letterSpacing
        {
            get => m_LetterSpacing;
            private set
            {
                m_LetterSpacing.target = value.target;
                if (m_LetterSpacing == value)
                {
                    value.Dispose();
                    return;
                }

                m_LetterSpacing.Dispose();
                m_LetterSpacing = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> marginBottom
        {
            get => m_MarginBottom;
            private set
            {
                m_MarginBottom.target = value.target;
                if (m_MarginBottom == value)
                {
                    value.Dispose();
                    return;
                }

                m_MarginBottom.Dispose();
                m_MarginBottom = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> marginLeft
        {
            get => m_MarginLeft;
            private set
            {
                m_MarginLeft.target = value.target;
                if (m_MarginLeft == value)
                {
                    value.Dispose();
                    return;
                }

                m_MarginLeft.Dispose();
                m_MarginLeft = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> marginRight
        {
            get => m_MarginRight;
            private set
            {
                m_MarginRight.target = value.target;
                if (m_MarginRight == value)
                {
                    value.Dispose();
                    return;
                }

                m_MarginRight.Dispose();
                m_MarginRight = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> marginTop
        {
            get => m_MarginTop;
            private set
            {
                m_MarginTop.target = value.target;
                if (m_MarginTop == value)
                {
                    value.Dispose();
                    return;
                }

                m_MarginTop.Dispose();
                m_MarginTop = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> maxHeight
        {
            get => m_MaxHeight;
            private set
            {
                m_MaxHeight.target = value.target;
                if (m_MaxHeight == value)
                {
                    value.Dispose();
                    return;
                }

                m_MaxHeight.Dispose();
                m_MaxHeight = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> maxWidth
        {
            get => m_MaxWidth;
            private set
            {
                m_MaxWidth.target = value.target;
                if (m_MaxWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_MaxWidth.Dispose();
                m_MaxWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> minHeight
        {
            get => m_MinHeight;
            private set
            {
                m_MinHeight.target = value.target;
                if (m_MinHeight == value)
                {
                    value.Dispose();
                    return;
                }

                m_MinHeight.Dispose();
                m_MinHeight = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> minWidth
        {
            get => m_MinWidth;
            private set
            {
                m_MinWidth.target = value.target;
                if (m_MinWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_MinWidth.Dispose();
                m_MinWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> opacity
        {
            get => m_Opacity;
            private set
            {
                m_Opacity.target = value.target;
                if (m_Opacity == value)
                {
                    value.Dispose();
                    return;
                }

                m_Opacity.Dispose();
                m_Opacity = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Overflow>, OverflowInternal> overflow
        {
            get => m_Overflow;
            private set
            {
                m_Overflow.target = value.target;
                if (m_Overflow == value)
                {
                    value.Dispose();
                    return;
                }

                m_Overflow.Dispose();
                m_Overflow = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> paddingBottom
        {
            get => m_PaddingBottom;
            private set
            {
                m_PaddingBottom.target = value.target;
                if (m_PaddingBottom == value)
                {
                    value.Dispose();
                    return;
                }

                m_PaddingBottom.Dispose();
                m_PaddingBottom = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> paddingLeft
        {
            get => m_PaddingLeft;
            private set
            {
                m_PaddingLeft.target = value.target;
                if (m_PaddingLeft == value)
                {
                    value.Dispose();
                    return;
                }

                m_PaddingLeft.Dispose();
                m_PaddingLeft = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> paddingRight
        {
            get => m_PaddingRight;
            private set
            {
                m_PaddingRight.target = value.target;
                if (m_PaddingRight == value)
                {
                    value.Dispose();
                    return;
                }

                m_PaddingRight.Dispose();
                m_PaddingRight = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> paddingTop
        {
            get => m_PaddingTop;
            private set
            {
                m_PaddingTop.target = value.target;
                if (m_PaddingTop == value)
                {
                    value.Dispose();
                    return;
                }

                m_PaddingTop.Dispose();
                m_PaddingTop = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Position>, Position> position
        {
            get => m_Position;
            private set
            {
                m_Position.target = value.target;
                if (m_Position == value)
                {
                    value.Dispose();
                    return;
                }

                m_Position.Dispose();
                m_Position = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> right
        {
            get => m_Right;
            private set
            {
                m_Right.target = value.target;
                if (m_Right == value)
                {
                    value.Dispose();
                    return;
                }

                m_Right.Dispose();
                m_Right = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleRotate, Rotate> rotate
        {
            get => m_Rotate;
            private set
            {
                m_Rotate.target = value.target;
                if (m_Rotate == value)
                {
                    value.Dispose();
                    return;
                }

                m_Rotate.Dispose();
                m_Rotate = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleScale, Scale> scale
        {
            get => m_Scale;
            private set
            {
                m_Scale.target = value.target;
                if (m_Scale == value)
                {
                    value.Dispose();
                    return;
                }

                m_Scale.Dispose();
                m_Scale = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<TextOverflow>, TextOverflow> textOverflow
        {
            get => m_TextOverflow;
            private set
            {
                m_TextOverflow.target = value.target;
                if (m_TextOverflow == value)
                {
                    value.Dispose();
                    return;
                }

                m_TextOverflow.Dispose();
                m_TextOverflow = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleTextShadow, TextShadow> textShadow
        {
            get => m_TextShadow;
            private set
            {
                m_TextShadow.target = value.target;
                if (m_TextShadow == value)
                {
                    value.Dispose();
                    return;
                }

                m_TextShadow.Dispose();
                m_TextShadow = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> top
        {
            get => m_Top;
            private set
            {
                m_Top.target = value.target;
                if (m_Top == value)
                {
                    value.Dispose();
                    return;
                }

                m_Top.Dispose();
                m_Top = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleTransformOrigin, TransformOrigin> transformOrigin
        {
            get => m_TransformOrigin;
            private set
            {
                m_TransformOrigin.target = value.target;
                if (m_TransformOrigin == value)
                {
                    value.Dispose();
                    return;
                }

                m_TransformOrigin.Dispose();
                m_TransformOrigin = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleList<TimeValue>, List<TimeValue>> transitionDelay
        {
            get => m_TransitionDelay;
            private set
            {
                m_TransitionDelay.target = value.target;
                if (m_TransitionDelay == value)
                {
                    value.Dispose();
                    return;
                }

                m_TransitionDelay.Dispose();
                m_TransitionDelay = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleList<TimeValue>, List<TimeValue>> transitionDuration
        {
            get => m_TransitionDuration;
            private set
            {
                m_TransitionDuration.target = value.target;
                if (m_TransitionDuration == value)
                {
                    value.Dispose();
                    return;
                }

                m_TransitionDuration.Dispose();
                m_TransitionDuration = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleList<StylePropertyName>, List<StylePropertyName>> transitionProperty
        {
            get => m_TransitionProperty;
            private set
            {
                m_TransitionProperty.target = value.target;
                if (m_TransitionProperty == value)
                {
                    value.Dispose();
                    return;
                }

                m_TransitionProperty.Dispose();
                m_TransitionProperty = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleList<EasingFunction>, List<EasingFunction>> transitionTimingFunction
        {
            get => m_TransitionTimingFunction;
            private set
            {
                m_TransitionTimingFunction.target = value.target;
                if (m_TransitionTimingFunction == value)
                {
                    value.Dispose();
                    return;
                }

                m_TransitionTimingFunction.Dispose();
                m_TransitionTimingFunction = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleTranslate, Translate> translate
        {
            get => m_Translate;
            private set
            {
                m_Translate.target = value.target;
                if (m_Translate == value)
                {
                    value.Dispose();
                    return;
                }

                m_Translate.Dispose();
                m_Translate = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> unityBackgroundImageTintColor
        {
            get => m_UnityBackgroundImageTintColor;
            private set
            {
                m_UnityBackgroundImageTintColor.target = value.target;
                if (m_UnityBackgroundImageTintColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityBackgroundImageTintColor.Dispose();
                m_UnityBackgroundImageTintColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<EditorTextRenderingMode>, EditorTextRenderingMode> unityEditorTextRenderingMode
        {
            get => m_UnityEditorTextRenderingMode;
            private set
            {
                m_UnityEditorTextRenderingMode.target = value.target;
                if (m_UnityEditorTextRenderingMode == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityEditorTextRenderingMode.Dispose();
                m_UnityEditorTextRenderingMode = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFont, Font> unityFont
        {
            get => m_UnityFont;
            private set
            {
                m_UnityFont.target = value.target;
                if (m_UnityFont == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityFont.Dispose();
                m_UnityFont = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFontDefinition, FontDefinition> unityFontDefinition
        {
            get => m_UnityFontDefinition;
            private set
            {
                m_UnityFontDefinition.target = value.target;
                if (m_UnityFontDefinition == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityFontDefinition.Dispose();
                m_UnityFontDefinition = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<FontStyle>, FontStyle> unityFontStyleAndWeight
        {
            get => m_UnityFontStyleAndWeight;
            private set
            {
                m_UnityFontStyleAndWeight.target = value.target;
                if (m_UnityFontStyleAndWeight == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityFontStyleAndWeight.Dispose();
                m_UnityFontStyleAndWeight = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<OverflowClipBox>, OverflowClipBox> unityOverflowClipBox
        {
            get => m_UnityOverflowClipBox;
            private set
            {
                m_UnityOverflowClipBox.target = value.target;
                if (m_UnityOverflowClipBox == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityOverflowClipBox.Dispose();
                m_UnityOverflowClipBox = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> unityParagraphSpacing
        {
            get => m_UnityParagraphSpacing;
            private set
            {
                m_UnityParagraphSpacing.target = value.target;
                if (m_UnityParagraphSpacing == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityParagraphSpacing.Dispose();
                m_UnityParagraphSpacing = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleInt, int> unitySliceBottom
        {
            get => m_UnitySliceBottom;
            private set
            {
                m_UnitySliceBottom.target = value.target;
                if (m_UnitySliceBottom == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnitySliceBottom.Dispose();
                m_UnitySliceBottom = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleInt, int> unitySliceLeft
        {
            get => m_UnitySliceLeft;
            private set
            {
                m_UnitySliceLeft.target = value.target;
                if (m_UnitySliceLeft == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnitySliceLeft.Dispose();
                m_UnitySliceLeft = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleInt, int> unitySliceRight
        {
            get => m_UnitySliceRight;
            private set
            {
                m_UnitySliceRight.target = value.target;
                if (m_UnitySliceRight == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnitySliceRight.Dispose();
                m_UnitySliceRight = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> unitySliceScale
        {
            get => m_UnitySliceScale;
            private set
            {
                m_UnitySliceScale.target = value.target;
                if (m_UnitySliceScale == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnitySliceScale.Dispose();
                m_UnitySliceScale = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleInt, int> unitySliceTop
        {
            get => m_UnitySliceTop;
            private set
            {
                m_UnitySliceTop.target = value.target;
                if (m_UnitySliceTop == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnitySliceTop.Dispose();
                m_UnitySliceTop = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<SliceType>, SliceType> unitySliceType
        {
            get => m_UnitySliceType;
            private set
            {
                m_UnitySliceType.target = value.target;
                if (m_UnitySliceType == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnitySliceType.Dispose();
                m_UnitySliceType = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<TextAnchor>, TextAnchor> unityTextAlign
        {
            get => m_UnityTextAlign;
            private set
            {
                m_UnityTextAlign.target = value.target;
                if (m_UnityTextAlign == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityTextAlign.Dispose();
                m_UnityTextAlign = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleTextAutoSize, TextAutoSize> unityTextAutoSize
        {
            get => m_UnityTextAutoSize;
            private set
            {
                m_UnityTextAutoSize.target = value.target;
                if (m_UnityTextAutoSize == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityTextAutoSize.Dispose();
                m_UnityTextAutoSize = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<TextGeneratorType>, TextGeneratorType> unityTextGenerator
        {
            get => m_UnityTextGenerator;
            private set
            {
                m_UnityTextGenerator.target = value.target;
                if (m_UnityTextGenerator == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityTextGenerator.Dispose();
                m_UnityTextGenerator = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleColor, Color> unityTextOutlineColor
        {
            get => m_UnityTextOutlineColor;
            private set
            {
                m_UnityTextOutlineColor.target = value.target;
                if (m_UnityTextOutlineColor == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityTextOutlineColor.Dispose();
                m_UnityTextOutlineColor = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleFloat, float> unityTextOutlineWidth
        {
            get => m_UnityTextOutlineWidth;
            private set
            {
                m_UnityTextOutlineWidth.target = value.target;
                if (m_UnityTextOutlineWidth == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityTextOutlineWidth.Dispose();
                m_UnityTextOutlineWidth = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<TextOverflowPosition>, TextOverflowPosition> unityTextOverflowPosition
        {
            get => m_UnityTextOverflowPosition;
            private set
            {
                m_UnityTextOverflowPosition.target = value.target;
                if (m_UnityTextOverflowPosition == value)
                {
                    value.Dispose();
                    return;
                }

                m_UnityTextOverflowPosition.Dispose();
                m_UnityTextOverflowPosition = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<Visibility>, Visibility> visibility
        {
            get => m_Visibility;
            private set
            {
                m_Visibility.target = value.target;
                if (m_Visibility == value)
                {
                    value.Dispose();
                    return;
                }

                m_Visibility.Dispose();
                m_Visibility = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleEnum<WhiteSpace>, WhiteSpace> whiteSpace
        {
            get => m_WhiteSpace;
            private set
            {
                m_WhiteSpace.target = value.target;
                if (m_WhiteSpace == value)
                {
                    value.Dispose();
                    return;
                }

                m_WhiteSpace.Dispose();
                m_WhiteSpace = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> width
        {
            get => m_Width;
            private set
            {
                m_Width.target = value.target;
                if (m_Width == value)
                {
                    value.Dispose();
                    return;
                }

                m_Width.Dispose();
                m_Width = value;
                Notify();
            }
        }

        [CreateProperty]
        public StylePropertyData<StyleLength, Length> wordSpacing
        {
            get => m_WordSpacing;
            private set
            {
                m_WordSpacing.target = value.target;
                if (m_WordSpacing == value)
                {
                    value.Dispose();
                    return;
                }

                m_WordSpacing.Dispose();
                m_WordSpacing = value;
                Notify();
            }
        }

        private void Refresh(VisualElement element, in ResolutionContext context)
        {
            alignContent = ComputeStyleProperty(element, nameof(alignContent), element.style.alignContent, element.computedStyle.alignContent, in context);
            alignItems = ComputeStyleProperty(element, nameof(alignItems), element.style.alignItems, element.computedStyle.alignItems, in context);
            alignSelf = ComputeStyleProperty(element, nameof(alignSelf), element.style.alignSelf, element.computedStyle.alignSelf, in context);
            backgroundColor = ComputeStyleProperty(element, nameof(backgroundColor), element.style.backgroundColor, element.computedStyle.backgroundColor, in context);
            backgroundImage = ComputeStyleProperty(element, nameof(backgroundImage), element.style.backgroundImage, element.computedStyle.backgroundImage, in context);
            backgroundPositionX = ComputeStyleProperty(element, nameof(backgroundPositionX), element.style.backgroundPositionX, element.computedStyle.backgroundPositionX, in context);
            backgroundPositionY = ComputeStyleProperty(element, nameof(backgroundPositionY), element.style.backgroundPositionY, element.computedStyle.backgroundPositionY, in context);
            backgroundRepeat = ComputeStyleProperty(element, nameof(backgroundRepeat), element.style.backgroundRepeat, element.computedStyle.backgroundRepeat, in context);
            backgroundSize = ComputeStyleProperty(element, nameof(backgroundSize), element.style.backgroundSize, element.computedStyle.backgroundSize, in context);
            borderBottomColor = ComputeStyleProperty(element, nameof(borderBottomColor), element.style.borderBottomColor, element.computedStyle.borderBottomColor, in context);
            borderBottomLeftRadius = ComputeStyleProperty(element, nameof(borderBottomLeftRadius), element.style.borderBottomLeftRadius, element.computedStyle.borderBottomLeftRadius, in context);
            borderBottomRightRadius = ComputeStyleProperty(element, nameof(borderBottomRightRadius), element.style.borderBottomRightRadius, element.computedStyle.borderBottomRightRadius, in context);
            borderBottomWidth = ComputeStyleProperty(element, nameof(borderBottomWidth), element.style.borderBottomWidth, element.computedStyle.borderBottomWidth, in context);
            borderLeftColor = ComputeStyleProperty(element, nameof(borderLeftColor), element.style.borderLeftColor, element.computedStyle.borderLeftColor, in context);
            borderLeftWidth = ComputeStyleProperty(element, nameof(borderLeftWidth), element.style.borderLeftWidth, element.computedStyle.borderLeftWidth, in context);
            borderRightColor = ComputeStyleProperty(element, nameof(borderRightColor), element.style.borderRightColor, element.computedStyle.borderRightColor, in context);
            borderRightWidth = ComputeStyleProperty(element, nameof(borderRightWidth), element.style.borderRightWidth, element.computedStyle.borderRightWidth, in context);
            borderTopColor = ComputeStyleProperty(element, nameof(borderTopColor), element.style.borderTopColor, element.computedStyle.borderTopColor, in context);
            borderTopLeftRadius = ComputeStyleProperty(element, nameof(borderTopLeftRadius), element.style.borderTopLeftRadius, element.computedStyle.borderTopLeftRadius, in context);
            borderTopRightRadius = ComputeStyleProperty(element, nameof(borderTopRightRadius), element.style.borderTopRightRadius, element.computedStyle.borderTopRightRadius, in context);
            borderTopWidth = ComputeStyleProperty(element, nameof(borderTopWidth), element.style.borderTopWidth, element.computedStyle.borderTopWidth, in context);
            bottom = ComputeStyleProperty(element, nameof(bottom), element.style.bottom, element.computedStyle.bottom, in context);
            color = ComputeStyleProperty(element, nameof(color), element.style.color, element.computedStyle.color, in context);
            cursor = ComputeStyleProperty(element, nameof(cursor), element.style.cursor, element.computedStyle.cursor, in context);
            display = ComputeStyleProperty(element, nameof(display), element.style.display, element.computedStyle.display, in context);
            flexBasis = ComputeStyleProperty(element, nameof(flexBasis), element.style.flexBasis, element.computedStyle.flexBasis, in context);
            flexDirection = ComputeStyleProperty(element, nameof(flexDirection), element.style.flexDirection, element.computedStyle.flexDirection, in context);
            flexGrow = ComputeStyleProperty(element, nameof(flexGrow), element.style.flexGrow, element.computedStyle.flexGrow, in context);
            flexShrink = ComputeStyleProperty(element, nameof(flexShrink), element.style.flexShrink, element.computedStyle.flexShrink, in context);
            flexWrap = ComputeStyleProperty(element, nameof(flexWrap), element.style.flexWrap, element.computedStyle.flexWrap, in context);
            fontSize = ComputeStyleProperty(element, nameof(fontSize), element.style.fontSize, element.computedStyle.fontSize, in context);
            height = ComputeStyleProperty(element, nameof(height), element.style.height, element.computedStyle.height, in context);
            justifyContent = ComputeStyleProperty(element, nameof(justifyContent), element.style.justifyContent, element.computedStyle.justifyContent, in context);
            left = ComputeStyleProperty(element, nameof(left), element.style.left, element.computedStyle.left, in context);
            letterSpacing = ComputeStyleProperty(element, nameof(letterSpacing), element.style.letterSpacing, element.computedStyle.letterSpacing, in context);
            marginBottom = ComputeStyleProperty(element, nameof(marginBottom), element.style.marginBottom, element.computedStyle.marginBottom, in context);
            marginLeft = ComputeStyleProperty(element, nameof(marginLeft), element.style.marginLeft, element.computedStyle.marginLeft, in context);
            marginRight = ComputeStyleProperty(element, nameof(marginRight), element.style.marginRight, element.computedStyle.marginRight, in context);
            marginTop = ComputeStyleProperty(element, nameof(marginTop), element.style.marginTop, element.computedStyle.marginTop, in context);
            maxHeight = ComputeStyleProperty(element, nameof(maxHeight), element.style.maxHeight, element.computedStyle.maxHeight, in context);
            maxWidth = ComputeStyleProperty(element, nameof(maxWidth), element.style.maxWidth, element.computedStyle.maxWidth, in context);
            minHeight = ComputeStyleProperty(element, nameof(minHeight), element.style.minHeight, element.computedStyle.minHeight, in context);
            minWidth = ComputeStyleProperty(element, nameof(minWidth), element.style.minWidth, element.computedStyle.minWidth, in context);
            opacity = ComputeStyleProperty(element, nameof(opacity), element.style.opacity, element.computedStyle.opacity, in context);
            overflow = ComputeStyleProperty(element, nameof(overflow), element.style.overflow, element.computedStyle.overflow, in context);
            paddingBottom = ComputeStyleProperty(element, nameof(paddingBottom), element.style.paddingBottom, element.computedStyle.paddingBottom, in context);
            paddingLeft = ComputeStyleProperty(element, nameof(paddingLeft), element.style.paddingLeft, element.computedStyle.paddingLeft, in context);
            paddingRight = ComputeStyleProperty(element, nameof(paddingRight), element.style.paddingRight, element.computedStyle.paddingRight, in context);
            paddingTop = ComputeStyleProperty(element, nameof(paddingTop), element.style.paddingTop, element.computedStyle.paddingTop, in context);
            position = ComputeStyleProperty(element, nameof(position), element.style.position, element.computedStyle.position, in context);
            right = ComputeStyleProperty(element, nameof(right), element.style.right, element.computedStyle.right, in context);
            rotate = ComputeStyleProperty(element, nameof(rotate), element.style.rotate, element.computedStyle.rotate, in context);
            scale = ComputeStyleProperty(element, nameof(scale), element.style.scale, element.computedStyle.scale, in context);
            textOverflow = ComputeStyleProperty(element, nameof(textOverflow), element.style.textOverflow, element.computedStyle.textOverflow, in context);
            textShadow = ComputeStyleProperty(element, nameof(textShadow), element.style.textShadow, element.computedStyle.textShadow, in context);
            top = ComputeStyleProperty(element, nameof(top), element.style.top, element.computedStyle.top, in context);
            transformOrigin = ComputeStyleProperty(element, nameof(transformOrigin), element.style.transformOrigin, element.computedStyle.transformOrigin, in context);
            transitionDelay = ComputeStyleProperty(element, nameof(transitionDelay), element.style.transitionDelay, element.computedStyle.transitionDelay, in context);
            transitionDuration = ComputeStyleProperty(element, nameof(transitionDuration), element.style.transitionDuration, element.computedStyle.transitionDuration, in context);
            transitionProperty = ComputeStyleProperty(element, nameof(transitionProperty), element.style.transitionProperty, element.computedStyle.transitionProperty, in context);
            transitionTimingFunction = ComputeStyleProperty(element, nameof(transitionTimingFunction), element.style.transitionTimingFunction, element.computedStyle.transitionTimingFunction, in context);
            translate = ComputeStyleProperty(element, nameof(translate), element.style.translate, element.computedStyle.translate, in context);
            unityBackgroundImageTintColor = ComputeStyleProperty(element, nameof(unityBackgroundImageTintColor), element.style.unityBackgroundImageTintColor, element.computedStyle.unityBackgroundImageTintColor, in context);
            unityEditorTextRenderingMode = ComputeStyleProperty(element, nameof(unityEditorTextRenderingMode), element.style.unityEditorTextRenderingMode, element.computedStyle.unityEditorTextRenderingMode, in context);
            unityFont = ComputeStyleProperty(element, nameof(unityFont), element.style.unityFont, element.computedStyle.unityFont, in context);
            unityFontDefinition = ComputeStyleProperty(element, nameof(unityFontDefinition), element.style.unityFontDefinition, element.computedStyle.unityFontDefinition, in context);
            unityFontStyleAndWeight = ComputeStyleProperty(element, nameof(unityFontStyleAndWeight), element.style.unityFontStyleAndWeight, element.computedStyle.unityFontStyleAndWeight, in context);
            unityOverflowClipBox = ComputeStyleProperty(element, nameof(unityOverflowClipBox), element.style.unityOverflowClipBox, element.computedStyle.unityOverflowClipBox, in context);
            unityParagraphSpacing = ComputeStyleProperty(element, nameof(unityParagraphSpacing), element.style.unityParagraphSpacing, element.computedStyle.unityParagraphSpacing, in context);
            unitySliceBottom = ComputeStyleProperty(element, nameof(unitySliceBottom), element.style.unitySliceBottom, element.computedStyle.unitySliceBottom, in context);
            unitySliceLeft = ComputeStyleProperty(element, nameof(unitySliceLeft), element.style.unitySliceLeft, element.computedStyle.unitySliceLeft, in context);
            unitySliceRight = ComputeStyleProperty(element, nameof(unitySliceRight), element.style.unitySliceRight, element.computedStyle.unitySliceRight, in context);
            unitySliceScale = ComputeStyleProperty(element, nameof(unitySliceScale), element.style.unitySliceScale, element.computedStyle.unitySliceScale, in context);
            unitySliceTop = ComputeStyleProperty(element, nameof(unitySliceTop), element.style.unitySliceTop, element.computedStyle.unitySliceTop, in context);
            unitySliceType = ComputeStyleProperty(element, nameof(unitySliceType), element.style.unitySliceType, element.computedStyle.unitySliceType, in context);
            unityTextAlign = ComputeStyleProperty(element, nameof(unityTextAlign), element.style.unityTextAlign, element.computedStyle.unityTextAlign, in context);
            unityTextAutoSize = ComputeStyleProperty(element, nameof(unityTextAutoSize), element.style.unityTextAutoSize, element.computedStyle.unityTextAutoSize, in context);
            unityTextGenerator = ComputeStyleProperty(element, nameof(unityTextGenerator), element.style.unityTextGenerator, element.computedStyle.unityTextGenerator, in context);
            unityTextOutlineColor = ComputeStyleProperty(element, nameof(unityTextOutlineColor), element.style.unityTextOutlineColor, element.computedStyle.unityTextOutlineColor, in context);
            unityTextOutlineWidth = ComputeStyleProperty(element, nameof(unityTextOutlineWidth), element.style.unityTextOutlineWidth, element.computedStyle.unityTextOutlineWidth, in context);
            unityTextOverflowPosition = ComputeStyleProperty(element, nameof(unityTextOverflowPosition), element.style.unityTextOverflowPosition, element.computedStyle.unityTextOverflowPosition, in context);
            visibility = ComputeStyleProperty(element, nameof(visibility), element.style.visibility, element.computedStyle.visibility, in context);
            whiteSpace = ComputeStyleProperty(element, nameof(whiteSpace), element.style.whiteSpace, element.computedStyle.whiteSpace, in context);
            width = ComputeStyleProperty(element, nameof(width), element.style.width, element.computedStyle.width, in context);
            wordSpacing = ComputeStyleProperty(element, nameof(wordSpacing), element.style.wordSpacing, element.computedStyle.wordSpacing, in context);
        }

        partial void DisposeProperties()
        {
            m_AlignContent.Dispose();
            m_AlignItems.Dispose();
            m_AlignSelf.Dispose();
            m_BackgroundColor.Dispose();
            m_BackgroundImage.Dispose();
            m_BackgroundPositionX.Dispose();
            m_BackgroundPositionY.Dispose();
            m_BackgroundRepeat.Dispose();
            m_BackgroundSize.Dispose();
            m_BorderBottomColor.Dispose();
            m_BorderBottomLeftRadius.Dispose();
            m_BorderBottomRightRadius.Dispose();
            m_BorderBottomWidth.Dispose();
            m_BorderLeftColor.Dispose();
            m_BorderLeftWidth.Dispose();
            m_BorderRightColor.Dispose();
            m_BorderRightWidth.Dispose();
            m_BorderTopColor.Dispose();
            m_BorderTopLeftRadius.Dispose();
            m_BorderTopRightRadius.Dispose();
            m_BorderTopWidth.Dispose();
            m_Bottom.Dispose();
            m_Color.Dispose();
            m_Cursor.Dispose();
            m_Display.Dispose();
            m_FlexBasis.Dispose();
            m_FlexDirection.Dispose();
            m_FlexGrow.Dispose();
            m_FlexShrink.Dispose();
            m_FlexWrap.Dispose();
            m_FontSize.Dispose();
            m_Height.Dispose();
            m_JustifyContent.Dispose();
            m_Left.Dispose();
            m_LetterSpacing.Dispose();
            m_MarginBottom.Dispose();
            m_MarginLeft.Dispose();
            m_MarginRight.Dispose();
            m_MarginTop.Dispose();
            m_MaxHeight.Dispose();
            m_MaxWidth.Dispose();
            m_MinHeight.Dispose();
            m_MinWidth.Dispose();
            m_Opacity.Dispose();
            m_Overflow.Dispose();
            m_PaddingBottom.Dispose();
            m_PaddingLeft.Dispose();
            m_PaddingRight.Dispose();
            m_PaddingTop.Dispose();
            m_Position.Dispose();
            m_Right.Dispose();
            m_Rotate.Dispose();
            m_Scale.Dispose();
            m_TextOverflow.Dispose();
            m_TextShadow.Dispose();
            m_Top.Dispose();
            m_TransformOrigin.Dispose();
            m_TransitionDelay.Dispose();
            m_TransitionDuration.Dispose();
            m_TransitionProperty.Dispose();
            m_TransitionTimingFunction.Dispose();
            m_Translate.Dispose();
            m_UnityBackgroundImageTintColor.Dispose();
            m_UnityEditorTextRenderingMode.Dispose();
            m_UnityFont.Dispose();
            m_UnityFontDefinition.Dispose();
            m_UnityFontStyleAndWeight.Dispose();
            m_UnityOverflowClipBox.Dispose();
            m_UnityParagraphSpacing.Dispose();
            m_UnitySliceBottom.Dispose();
            m_UnitySliceLeft.Dispose();
            m_UnitySliceRight.Dispose();
            m_UnitySliceScale.Dispose();
            m_UnitySliceTop.Dispose();
            m_UnitySliceType.Dispose();
            m_UnityTextAlign.Dispose();
            m_UnityTextAutoSize.Dispose();
            m_UnityTextGenerator.Dispose();
            m_UnityTextOutlineColor.Dispose();
            m_UnityTextOutlineWidth.Dispose();
            m_UnityTextOverflowPosition.Dispose();
            m_Visibility.Dispose();
            m_WhiteSpace.Dispose();
            m_Width.Dispose();
            m_WordSpacing.Dispose();
        }
    }
}
